# –û–ø—Ä–µ–¥–µ–ª–∏–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.ext.asyncio import async_sessionmaker # AsyncSession, 
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

import os
import time
from dotenv import load_dotenv

from src.services.LogsMaker import LogsMaker

load_dotenv()

ADMINS_PEER = []

DOMAIN = os.getenv('HOST')

user = os.getenv('user')
pswd = os.getenv('pswd')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
# engine = create_engine(f'postgresql+psycopg2://{user}:{pswd}@postgres/pdb', pool_size=50, max_overflow=0)

# try:  
#     engine.connect()
#     LogsMaker().ready_status_message("pSQL —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
# except Exception as ex: 
#     LogsMaker().fatal_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è pSQL: {ex}")

def create_db_engine():
    max_retries = 5
    retry_delay = 5
    
    for i in range(max_retries):
        try:
            engine = create_engine(f'postgresql+psycopg2://{user}:{pswd}@postgres/pdb', pool_size=50, max_overflow=0)
            connection = engine.connect()
            LogsMaker().ready_status_message("pSQL —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            connection.close()
            return engine
        except Exception as e:
            LogsMaker().warning_message(f"‚ùå Connection attempt {i+1}/{max_retries} failed: {e}")
            if i < max_retries - 1:
                LogsMaker().info_message(f"üïê Retrying in {retry_delay} seconds...")
                time.sleep(retry_delay)
    
    LogsMaker().fatal_message("Failed to connect to PostgreSQL after multiple attempts")

engine = create_db_engine()

Base = declarative_base()
Base.metadata.create_all(engine)



def create_async_db_engine():
    max_retries = 5
    retry_delay = 5
    
    for i in range(max_retries):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            engine = create_async_engine(
                f'postgresql+asyncpg://{user}:{pswd}@postgres/pdb',
                pool_size=50,
                max_overflow=0,
                echo=False  # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
            )
            LogsMaker().ready_status_message("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π pSQL –¥–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return engine
        except Exception as e:
            LogsMaker().warning_message(f"‚ùå Async connection attempt {i+1}/{max_retries} failed: {e}")
            if i < max_retries - 1:
                LogsMaker().info_message(f"üïê Retrying in {retry_delay} seconds...")
                time.sleep(retry_delay)
    
    LogsMaker().fatal_message("Failed to create async PostgreSQL engine after multiple attempts")

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
async_engine = create_async_db_engine()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
AsyncSessionLocal = async_sessionmaker(
    async_engine,
    class_=AsyncSession,
    expire_on_commit=True
)

# Base = declarative_base()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
# async def create_tables():
#     async with async_engine.begin() as conn:
#         await conn.run_sync(Base.metadata.create_all)
#     LogsMaker().info_message("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")