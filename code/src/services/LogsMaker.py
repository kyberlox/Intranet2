import logging
from tqdm import tqdm

# from fastapi import Request, HTTPException
# from fastapi.responses import HTMLResponse



class LogsMaker:
    def __init__(self):
        self.logging = logging
        self.logging.basicConfig(
            level=logging.DEBUG,
            format="%(asctime)s - %(levelname)s - %(message)s",
            datefmt="%d.%m.%Y %H:%M:%S",
            filename="./logs/fastapi-logs.log",
            filemode="w",
        )

    def progress(self, this_list, title=None, **kwargs):
        #bar_format = "{l_bar}%s{bar}%s{r_bar}" % ("\033[33m", "\033[0m")
        color_code = 208 #–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        bar_format = (
            f"{'{desc}: ' if title else ''}"
            f"{'{percentage:3.0f}%|'}"
            f"\033[38;5;{color_code}m{{bar}}\033[0m| "
            f"{{n_fmt}}/{{total_fmt}} [{{elapsed}}<{{remaining}}, {{rate_fmt}}{{postfix}}]"
        )
        if title is not None:
            kwargs["desc"] = title

        return tqdm(this_list, bar_format=bar_format, **kwargs)

    def fatal_message(self, message: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        error_msg = str(message)
        logging.error(f"üî• {error_msg}")
        #print(f"üî• \033[91m[ERROR] üî• {error_msg}\033[0m")  # 91 - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        return {"status" : "error", "message" : error_msg}

    def error_message(self, error: Exception) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
        error_msg = str(error)
        logging.error(f"‚ùå {error_msg}")
        #print(f"‚ùå \033[91m[ERROR] ‚ùå {error_msg}\033[0m")  # 91 - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        return {"status" : "error", "message" : error_msg}

    def warning_message(self, message: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ/–æ—à–∏–±–∫—É –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
        logging.warning(f"‚ö†Ô∏è {message}")
        #print(f"‚ö†Ô∏è \033[93m[WARNING] ‚ö†Ô∏è {message}\033[0m")  # 93 - –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
        return {"status" : "warning", "message" : message}

    def info_message(self, message: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
        logging.info(f"‚ÑπÔ∏è {message}")
        #print(f"‚ÑπÔ∏è\033[94m[INFO] ‚ÑπÔ∏è {message}\033[0m")  # 94 - –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
        return {"status" : "info", "message" : message}

    def ready_status_message(self, message: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∑–µ–ª–µ–Ω–æ–º —Ü–≤–µ—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        logging.debug(f"‚úÖ {message}")
        #print(f"‚úÖ \033[92m[READY] ‚úÖ {message}\033[0m")  # 92 - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        return {"status" : "ready", "message" : message}
